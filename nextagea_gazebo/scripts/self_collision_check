#!/usr/bin/env python

import pyexotica as exo
from pyexotica.publish_trajectory import *
import signal
import sys
import warnings
import rospy
from time import sleep
import numpy as np
from pyexotica.tools import check_whether_trajectory_is_collision_free_by_subsampling, get_colliding_links
from trajectory_msgs.msg import JointTrajectoryPoint, JointTrajectory
from sensor_msgs.msg import JointState
from control_msgs.msg import JointTrajectoryControllerState

class colours:
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

class SelfCollisionCheck:
    '''Self-collision checker for the Nextage platform. Node sits in front of trajectory controller and filters
    out potentially harmful trajectories that may cause self-collisions'''

    def __init__(self):
        # Initial setup and sub/pub to nodes
        self.input_traj = rospy.Subscriber(rospy.resolve_name("~traj_input"), JointTrajectory, self.callback, queue_size=1)
        self.output_traj = rospy.Publisher(rospy.resolve_name("~traj_output"), JointTrajectory, queue_size=1)

        # TODO: Perhaps this would be better setup as a ROS service that keeps a track of the current robot state
        # at a set rate (say 2x a second), rather than querying in this program. Minor change
        self.left_arm = rospy.Subscriber(rospy.resolve_name("~larm_input"), JointTrajectoryControllerState, self.larm_callback, queue_size=1)
        self.right_arm = rospy.Subscriber(rospy.resolve_name("~rarm_input"), JointTrajectoryControllerState, self.rarm_callback, queue_size=1)

        # Get EXOTica problem
        self.problem = exo.Setup.load_problem('{nextagea_gazebo}/config/collision_setup.xml')

        self.check_trajectory = False
        self.rate = rospy.Rate(10)

    def callback(self, data):
        # Process JointTrajectory to be EXOTica solution form
        self.check_trajectory = True
        self.trajectory_message = data
    
    def larm_callback(self, data):
        self.larm_state = data

    def rarm_callback(self, data):
        self.rarm_state = data

    def spin(self):
        while not rospy.is_shutdown():
            if self.check_trajectory:
                # TODO: Wrap in try/except block
                # TODO: Currently outputs a self-collision if it starts in self-collision and then moves out of it

                # Find robot's current state
                # current_arms = list(self.larm_state.actual.positions) += list(self.rarm_state.actual.positions)
                current_arms = list(self.rarm_state.actual.positions)

                # Strip JointTrajectory down to be in EXOTica solution form
                list_traj = [current_arms]
                for i in range(0, len(self.trajectory_message.points)):
                    list_traj.append(list(self.trajectory_message.points[i].positions))
                exotica_traj = np.array([np.array(x) for x in list_traj])

                traj_check = check_whether_trajectory_is_collision_free_by_subsampling(self.problem.get_scene(), exotica_traj)

                if traj_check:
                    # Pass through trajectory
                    self.output_traj.publish(self.trajectory_message)
                else:
                    if MODE == '-warn':
                        print(colours.WARNING + "[WARN] Self-collision detected on following links:")
                        get_colliding_links(self.problem.get_scene())
                        print(colours.ENDC)
                        self.output_traj.publish(self.trajectory_message)
                    elif MODE == '-error':
                        print(colours.FAIL + "[ERROR] Self-collision detected on following links:")
                        get_colliding_links(self.problem.get_scene())
                        print(colours.ENDC)                        
                
                self.check_trajectory = False

            self.rate.sleep()


def main(args):
    global MODE 
    MODE = args[1]
    rospy.init_node('self_collision_check')
    col = SelfCollisionCheck()
    try:
        col.spin()
    except KeyboardInterrupt:
        print("Shutting down")

if __name__ == '__main__':
    main(sys.argv)